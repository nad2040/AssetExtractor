/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.nad2040.assetextractor;

import com.google.gson.Gson;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.*;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Optional;
import java.util.Scanner;

public class MCAssetExtractor {
    public static Path assets_directory;
    public static File indexes_directory; // use File instead of Path to sort indexes by last modified
    public static Path objects_directory;
    public static File index;
    public static final String USER_HOME = System.getProperty("user.home");

    public static void main(String[] args) throws IOException {
        getAssetsDirectory();
        getLastModifiedIndex();

        Gson gson = new Gson();

        FileReader r = new FileReader(index);
        Assets assets = gson.fromJson(r,Assets.class);

        String searchTerm = " ";
        while (!searchTerm.equals("!quit")) {
            System.out.print("Enter a search term or '!quit' to exit: ");
            searchTerm = new Scanner(System.in).next();

            for (String filename : assets.getKeys()) {
                if (filename.contains(searchTerm)) {
                    filename = filename.replace('/', File.separatorChar);
                    Assets.FileInfo fileInfo = assets.get(filename);
                    Path hashfilepath = objects_directory.resolve(Path.of(fileInfo.hash.substring(0,2), fileInfo.hash));
                    Path target = Path.of(System.getProperty("user.dir"), filename);
                    Files.createDirectories(target.getParent());
                    System.out.println("Copying " + assets_directory.relativize(hashfilepath) + " to " + filename + " ...");
                    Files.copy(hashfilepath, target, StandardCopyOption.REPLACE_EXISTING);
                }
            }
        }
    }

    public static void getAssetsDirectory() {
        assets_directory = switch (OSVersion.getOS()) {
            case MAC -> Path.of(USER_HOME,"Library","Application Support","minecraft","assets");
            case LINUX -> Path.of(USER_HOME,".minecraft","assets");
            case WINDOWS -> Path.of(USER_HOME,"AppData","Roaming",".minecraft","assets");
        };
        System.out.println("Found assets directory: " + assets_directory);
        indexes_directory = new File(assets_directory.toString(), "indexes");
        objects_directory = assets_directory.resolve("objects");
    }

    public static void getLastModifiedIndex() {
        if (indexes_directory.isDirectory()) {
            File[] files = indexes_directory.listFiles(File::isFile);
            assert files != null;
            Optional<File> opFile = Arrays.stream(files).max(Comparator.comparingLong(File::lastModified));
            opFile.ifPresent(file -> {
                    index = file;
                    System.out.println("Selecting most recent index file: " + index.getPath());
                    });
        }
    }
}
